// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: protos/private.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PrivateService_CreatePrivate_FullMethodName = "/proto.PrivateService/CreatePrivate"
	PrivateService_GetPrivate_FullMethodName    = "/proto.PrivateService/GetPrivate"
	PrivateService_ListPrivates_FullMethodName  = "/proto.PrivateService/ListPrivates"
	PrivateService_UpdatePrivate_FullMethodName = "/proto.PrivateService/UpdatePrivate"
	PrivateService_DeletePrivate_FullMethodName = "/proto.PrivateService/DeletePrivate"
)

// PrivateServiceClient is the client API for PrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivateServiceClient interface {
	CreatePrivate(ctx context.Context, in *CreatePrivateReq, opts ...grpc.CallOption) (*Void, error)
	GetPrivate(ctx context.Context, in *ById, opts ...grpc.CallOption) (*PrivateGet, error)
	ListPrivates(ctx context.Context, in *PrivateListReq, opts ...grpc.CallOption) (*PrivateListRes, error)
	UpdatePrivate(ctx context.Context, in *UpdatePrivat, opts ...grpc.CallOption) (*Void, error)
	DeletePrivate(ctx context.Context, in *DeletePrivat, opts ...grpc.CallOption) (*Void, error)
}

type privateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivateServiceClient(cc grpc.ClientConnInterface) PrivateServiceClient {
	return &privateServiceClient{cc}
}

func (c *privateServiceClient) CreatePrivate(ctx context.Context, in *CreatePrivateReq, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, PrivateService_CreatePrivate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) GetPrivate(ctx context.Context, in *ById, opts ...grpc.CallOption) (*PrivateGet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrivateGet)
	err := c.cc.Invoke(ctx, PrivateService_GetPrivate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) ListPrivates(ctx context.Context, in *PrivateListReq, opts ...grpc.CallOption) (*PrivateListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrivateListRes)
	err := c.cc.Invoke(ctx, PrivateService_ListPrivates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) UpdatePrivate(ctx context.Context, in *UpdatePrivat, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, PrivateService_UpdatePrivate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateServiceClient) DeletePrivate(ctx context.Context, in *DeletePrivat, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, PrivateService_DeletePrivate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateServiceServer is the server API for PrivateService service.
// All implementations must embed UnimplementedPrivateServiceServer
// for forward compatibility
type PrivateServiceServer interface {
	CreatePrivate(context.Context, *CreatePrivateReq) (*Void, error)
	GetPrivate(context.Context, *ById) (*PrivateGet, error)
	ListPrivates(context.Context, *PrivateListReq) (*PrivateListRes, error)
	UpdatePrivate(context.Context, *UpdatePrivat) (*Void, error)
	DeletePrivate(context.Context, *DeletePrivat) (*Void, error)
	mustEmbedUnimplementedPrivateServiceServer()
}

// UnimplementedPrivateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrivateServiceServer struct {
}

func (UnimplementedPrivateServiceServer) CreatePrivate(context.Context, *CreatePrivateReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivate not implemented")
}
func (UnimplementedPrivateServiceServer) GetPrivate(context.Context, *ById) (*PrivateGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivate not implemented")
}
func (UnimplementedPrivateServiceServer) ListPrivates(context.Context, *PrivateListReq) (*PrivateListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrivates not implemented")
}
func (UnimplementedPrivateServiceServer) UpdatePrivate(context.Context, *UpdatePrivat) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivate not implemented")
}
func (UnimplementedPrivateServiceServer) DeletePrivate(context.Context, *DeletePrivat) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrivate not implemented")
}
func (UnimplementedPrivateServiceServer) mustEmbedUnimplementedPrivateServiceServer() {}

// UnsafePrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivateServiceServer will
// result in compilation errors.
type UnsafePrivateServiceServer interface {
	mustEmbedUnimplementedPrivateServiceServer()
}

func RegisterPrivateServiceServer(s grpc.ServiceRegistrar, srv PrivateServiceServer) {
	s.RegisterService(&PrivateService_ServiceDesc, srv)
}

func _PrivateService_CreatePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrivateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).CreatePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_CreatePrivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).CreatePrivate(ctx, req.(*CreatePrivateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_GetPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).GetPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_GetPrivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).GetPrivate(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_ListPrivates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).ListPrivates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_ListPrivates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).ListPrivates(ctx, req.(*PrivateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_UpdatePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrivat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).UpdatePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_UpdatePrivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).UpdatePrivate(ctx, req.(*UpdatePrivat))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateService_DeletePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrivat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServiceServer).DeletePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrivateService_DeletePrivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServiceServer).DeletePrivate(ctx, req.(*DeletePrivat))
	}
	return interceptor(ctx, in, info, handler)
}

// PrivateService_ServiceDesc is the grpc.ServiceDesc for PrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PrivateService",
	HandlerType: (*PrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePrivate",
			Handler:    _PrivateService_CreatePrivate_Handler,
		},
		{
			MethodName: "GetPrivate",
			Handler:    _PrivateService_GetPrivate_Handler,
		},
		{
			MethodName: "ListPrivates",
			Handler:    _PrivateService_ListPrivates_Handler,
		},
		{
			MethodName: "UpdatePrivate",
			Handler:    _PrivateService_UpdatePrivate_Handler,
		},
		{
			MethodName: "DeletePrivate",
			Handler:    _PrivateService_DeletePrivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/private.proto",
}
