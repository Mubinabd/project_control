// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/group/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Create group",
                "parameters": [
                    {
                        "description": "group data",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.CreateGroupReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message\":\"group created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/group/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an group by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Delete Group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message\":\"Group deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/group/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List groups with filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Group"
                ],
                "summary": "List Groups",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of groups",
                        "schema": {
                            "$ref": "#/definitions/genproto.GroupListRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/group/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing group by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Update Group",
                "parameters": [
                    {
                        "description": "Group update data",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.UpdateGr"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message\":\"Group updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/group/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an group by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Get Group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Group data",
                        "schema": {
                            "$ref": "#/definitions/genproto.GroupGet"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Group not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/private/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new private",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Private"
                ],
                "summary": "Create private",
                "parameters": [
                    {
                        "description": "private data",
                        "name": "group",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.CreatePrivateReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message\":\"private created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/private/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an private by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Private"
                ],
                "summary": "Delete Private",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Private ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message\":\"Private deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/private/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List privaties with filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Private"
                ],
                "summary": "List Privaties",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of privaties",
                        "schema": {
                            "$ref": "#/definitions/genproto.PrivateListRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/private/update/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing private by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Private"
                ],
                "summary": "Update Private",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Private ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Private update data",
                        "name": "private",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genproto.UpdatePrivat"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message\":\"Private updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/private/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an private by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Private"
                ],
                "summary": "Get Private",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Private ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Private data",
                        "schema": {
                            "$ref": "#/definitions/genproto.PrivateGet"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Private not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "genproto.BodyUpt": {
            "type": "object",
            "properties": {
                "documentation": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.Documentation"
                    }
                },
                "phone_number": {
                    "type": "string"
                },
                "swaggerUrl": {
                    "type": "string"
                },
                "telegram_username": {
                    "type": "string"
                }
            }
        },
        "genproto.BodyUptd": {
            "type": "object",
            "properties": {
                "developers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.Developer"
                    }
                },
                "documentation": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.Documentation"
                    }
                },
                "name": {
                    "type": "string"
                },
                "swaggerUrl": {
                    "type": "string"
                }
            }
        },
        "genproto.CreateGroupReq": {
            "type": "object",
            "properties": {
                "developers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.Developer"
                    }
                },
                "documentation": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.Documentation"
                    }
                },
                "name": {
                    "type": "string"
                },
                "swaggerUrl": {
                    "type": "string"
                }
            }
        },
        "genproto.CreatePrivateReq": {
            "type": "object",
            "properties": {
                "documentation": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.Documentation"
                    }
                },
                "phone_number": {
                    "type": "string"
                },
                "swaggerUrl": {
                    "type": "string"
                },
                "telegram_username": {
                    "type": "string"
                }
            }
        },
        "genproto.Developer": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "telegram_username": {
                    "type": "string"
                }
            }
        },
        "genproto.Documentation": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "genproto.GroupGet": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "developers": {
                    "$ref": "#/definitions/genproto.Developer"
                },
                "documentation": {
                    "$ref": "#/definitions/genproto.Documentation"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "swaggerUrl": {
                    "type": "string"
                }
            }
        },
        "genproto.GroupListRes": {
            "type": "object",
            "properties": {
                "group": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.GroupGet"
                    }
                }
            }
        },
        "genproto.PrivateGet": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "documentation": {
                    "$ref": "#/definitions/genproto.Documentation"
                },
                "id": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "swaggerUrl": {
                    "type": "string"
                },
                "telegram_username": {
                    "type": "string"
                }
            }
        },
        "genproto.PrivateListRes": {
            "type": "object",
            "properties": {
                "private": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genproto.PrivateGet"
                    }
                }
            }
        },
        "genproto.UpdateGr": {
            "type": "object",
            "properties": {
                "Body": {
                    "$ref": "#/definitions/genproto.BodyUptd"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "genproto.UpdatePrivat": {
            "type": "object",
            "properties": {
                "Body": {
                    "$ref": "#/definitions/genproto.BodyUpt"
                },
                "id": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Project Control API Documentation",
	Description:      "API for Instant Delivery resources",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
