basePath: /
definitions:
  auth.ChangePasswordReqBody:
    properties:
      CurrentPassword:
        type: string
      NewPassword:
        type: string
    type: object
  auth.EditProfileReqBpdy:
    properties:
      DateOfBirth:
        type: string
      Email:
        type: string
      FullName:
        type: string
      Username:
        type: string
    type: object
  auth.GetByEmail:
    properties:
      email:
        type: string
    type: object
  auth.ListUserRes:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/auth.UserRes'
        type: array
    type: object
  auth.LoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  auth.RegisterReq:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  auth.ResetPassReqBody:
    properties:
      new_password:
        type: string
      reset_token:
        type: string
    type: object
  auth.Setting:
    properties:
      Language:
        type: string
      Notification:
        type: string
      PrivacyLevel:
        type: string
      Theme:
        type: string
    type: object
  auth.UserRes:
    properties:
      DateOfBirth:
        type: string
      Email:
        type: string
      FullName:
        type: string
      Id:
        type: string
      Role:
        type: string
      Username:
        type: string
    type: object
  genproto.BodyUpt:
    properties:
      documentation:
        items:
          $ref: '#/definitions/genproto.Documentation'
        type: array
      phone_number:
        type: string
      swaggerUrl:
        type: string
      telegram_username:
        type: string
    type: object
  genproto.BodyUptd:
    properties:
      developers:
        items:
          $ref: '#/definitions/genproto.Developer'
        type: array
      documentation:
        items:
          $ref: '#/definitions/genproto.Documentation'
        type: array
      name:
        type: string
      swaggerUrl:
        type: string
    type: object
  genproto.CreateGroupReq:
    properties:
      developers:
        items:
          $ref: '#/definitions/genproto.Developer'
        type: array
      documentation:
        items:
          $ref: '#/definitions/genproto.Documentation'
        type: array
      name:
        type: string
      swaggerUrl:
        type: string
    type: object
  genproto.CreatePrivateReq:
    properties:
      documentation:
        items:
          $ref: '#/definitions/genproto.Documentation'
        type: array
      phone_number:
        type: string
      swaggerUrl:
        type: string
      telegram_username:
        type: string
    type: object
  genproto.Developer:
    properties:
      name:
        type: string
      phone_number:
        type: string
      telegram_username:
        type: string
    type: object
  genproto.Documentation:
    properties:
      description:
        type: string
      title:
        type: string
      url:
        type: string
    type: object
  genproto.GroupGet:
    properties:
      created_at:
        type: string
      developers:
        $ref: '#/definitions/genproto.Developer'
      documentation:
        $ref: '#/definitions/genproto.Documentation'
      id:
        type: string
      name:
        type: string
      swaggerUrl:
        type: string
    type: object
  genproto.GroupListRes:
    properties:
      group:
        items:
          $ref: '#/definitions/genproto.GroupGet'
        type: array
    type: object
  genproto.PrivateGet:
    properties:
      created_at:
        type: string
      documentation:
        $ref: '#/definitions/genproto.Documentation'
      id:
        type: string
      phone_number:
        type: string
      swaggerUrl:
        type: string
      telegram_username:
        type: string
    type: object
  genproto.PrivateListRes:
    properties:
      private:
        items:
          $ref: '#/definitions/genproto.PrivateGet'
        type: array
    type: object
  genproto.UpdateGr:
    properties:
      Body:
        $ref: '#/definitions/genproto.BodyUptd'
      id:
        type: string
    type: object
  genproto.UpdatePrivat:
    properties:
      Body:
        $ref: '#/definitions/genproto.BodyUpt'
      id:
        type: string
    type: object
info:
  contact: {}
  description: API for Instant Delivery resources
  title: Project Control API Documentation
  version: "1.0"
paths:
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Request to reset user's password
      parameters:
      - description: Email Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.GetByEmail'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent successfully
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Forgot password
      tags:
      - auth
  /login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: Login Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Login a user
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Register User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterReq'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Register a new user
      tags:
      - auth
  /reset-password:
    post:
      consumes:
      - application/json
      description: Reset user's password with a reset code
      parameters:
      - description: Password Reset Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPassReqBody'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            type: string
        "400":
          description: invalid request
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Reset password
      tags:
      - auth
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: UserName
        in: query
        name: username
        type: string
      - description: Full Name
        in: query
        name: full_name
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.ListUserRes'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - auth
  /v1/group/{id}:
    get:
      consumes:
      - application/json
      description: Get an group by ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Group data
          schema:
            $ref: '#/definitions/genproto.GroupGet'
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: Group not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get Group
      tags:
      - Group
  /v1/group/create:
    post:
      consumes:
      - application/json
      description: Create a new group
      parameters:
      - description: group data
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/genproto.CreateGroupReq'
      produces:
      - application/json
      responses:
        "200":
          description: message":"group created successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create group
      tags:
      - Group
  /v1/group/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an group by ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: message":"Group deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete Group
      tags:
      - Group
  /v1/group/list:
    get:
      consumes:
      - application/json
      description: List groups with filters
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of groups
          schema:
            $ref: '#/definitions/genproto.GroupListRes'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List Groups
      tags:
      - Group
  /v1/group/update/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing group by ID
      parameters:
      - description: Group update data
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/genproto.UpdateGr'
      produces:
      - application/json
      responses:
        "200":
          description: message":"Group updated successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update Group
      tags:
      - Group
  /v1/private/{id}:
    get:
      consumes:
      - application/json
      description: Get an private by ID
      parameters:
      - description: Private ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Private data
          schema:
            $ref: '#/definitions/genproto.PrivateGet'
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: Private not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get Private
      tags:
      - Private
  /v1/private/create:
    post:
      consumes:
      - application/json
      description: Create a new private
      parameters:
      - description: private data
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/genproto.CreatePrivateReq'
      produces:
      - application/json
      responses:
        "200":
          description: message":"private created successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create private
      tags:
      - Private
  /v1/private/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an private by ID
      parameters:
      - description: Private ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: message":"Private deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete Private
      tags:
      - Private
  /v1/private/list:
    get:
      consumes:
      - application/json
      description: List privaties with filters
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of privaties
          schema:
            $ref: '#/definitions/genproto.PrivateListRes'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: List Privaties
      tags:
      - Private
  /v1/private/update/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing private by ID
      parameters:
      - description: Private ID
        in: path
        name: id
        required: true
        type: string
      - description: Private update data
        in: body
        name: private
        required: true
        schema:
          $ref: '#/definitions/genproto.UpdatePrivat'
      produces:
      - application/json
      responses:
        "200":
          description: message":"Private updated successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update Private
      tags:
      - Private
  /v1/user:
    delete:
      consumes:
      - application/json
      description: Delete a user with the specified ID
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
  /v1/user/passwords:
    put:
      consumes:
      - application/json
      description: Update the password of a user with the specified ID
      parameters:
      - description: Updated password details
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/auth.ChangePasswordReqBody'
      produces:
      - application/json
      responses:
        "200":
          description: Password updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /v1/user/profiles:
    get:
      consumes:
      - application/json
      description: Retrieve the profile of a user with the specified ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.UserRes'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the profile of a user with the specified ID
      parameters:
      - description: Updated profile details
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/auth.EditProfileReqBpdy'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Edit user profile
      tags:
      - users
  /v1/user/setting:
    get:
      consumes:
      - application/json
      description: Retrieve the settings of a user with the specified ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.Setting'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get user settings
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the settings of a user with the specified ID
      parameters:
      - description: Updated setting details
        in: body
        name: setting
        required: true
        schema:
          $ref: '#/definitions/auth.Setting'
      produces:
      - application/json
      responses:
        "200":
          description: Setting updated successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Edit user settings
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
